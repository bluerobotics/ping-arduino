// C++ implementation of the Blue Robotics 'Ping' binary message protocol

//~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
// THIS IS AN AUTOGENERATED FILE
// DO NOT EDIT
//~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!

#pragma once

#include "ping-message.h"

// TODO: should maybe be an enum
namespace Ping1dId
{
    static const uint16_t SET_DEVICE_ID = 1000;
    static const uint16_t SET_RANGE = 1001;
    static const uint16_t SET_SPEED_OF_SOUND = 1002;
    static const uint16_t SET_MODE_AUTO = 1003;
    static const uint16_t SET_PING_INTERVAL = 1004;
    static const uint16_t SET_GAIN_SETTING = 1005;
    static const uint16_t SET_PING_ENABLE = 1006;
    static const uint16_t FIRMWARE_VERSION = 1200;
    static const uint16_t DEVICE_ID = 1201;
    static const uint16_t VOLTAGE_5 = 1202;
    static const uint16_t SPEED_OF_SOUND = 1203;
    static const uint16_t RANGE = 1204;
    static const uint16_t MODE_AUTO = 1205;
    static const uint16_t PING_INTERVAL = 1206;
    static const uint16_t GAIN_SETTING = 1207;
    static const uint16_t TRANSMIT_DURATION = 1208;
    static const uint16_t GENERAL_INFO = 1210;
    static const uint16_t DISTANCE_SIMPLE = 1211;
    static const uint16_t DISTANCE = 1212;
    static const uint16_t PROCESSOR_TEMPERATURE = 1213;
    static const uint16_t PCB_TEMPERATURE = 1214;
    static const uint16_t PING_ENABLE = 1215;
    static const uint16_t PROFILE = 1300;
    static const uint16_t GOTO_BOOTLOADER = 1100;
    static const uint16_t CONTINUOUS_START = 1400;
    static const uint16_t CONTINUOUS_STOP = 1401;
}

class ping1d_set_device_id : public ping_message
{
public:
    ping1d_set_device_id(const ping_message& msg) : ping_message { msg } {}
    ping1d_set_device_id(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_set_device_id() : ping_message { static_cast<uint16_t>(11) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(1); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1000; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t device_id() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 0]); }
    void set_device_id(const uint8_t device_id) { reinterpret_cast<uint8_t&>(msgData[headerLength + 0]) = device_id; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  device_id: %d\n"
                , device_id()
            );
        }
        return written;
    }
};

class ping1d_set_range : public ping_message
{
public:
    ping1d_set_range(const ping_message& msg) : ping_message { msg } {}
    ping1d_set_range(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_set_range() : ping_message { static_cast<uint16_t>(18) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(8); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1001; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t scan_start() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 0]); }
    void set_scan_start(const uint32_t scan_start) { reinterpret_cast<uint32_t&>(msgData[headerLength + 0]) = scan_start; }
    uint32_t scan_length() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 4]); }
    void set_scan_length(const uint32_t scan_length) { reinterpret_cast<uint32_t&>(msgData[headerLength + 4]) = scan_length; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  scan_start: %d\n"
                "  scan_length: %d\n"
                , scan_start()
                , scan_length()
            );
        }
        return written;
    }
};

class ping1d_set_speed_of_sound : public ping_message
{
public:
    ping1d_set_speed_of_sound(const ping_message& msg) : ping_message { msg } {}
    ping1d_set_speed_of_sound(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_set_speed_of_sound() : ping_message { static_cast<uint16_t>(14) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(4); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1002; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t speed_of_sound() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 0]); }
    void set_speed_of_sound(const uint32_t speed_of_sound) { reinterpret_cast<uint32_t&>(msgData[headerLength + 0]) = speed_of_sound; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  speed_of_sound: %d\n"
                , speed_of_sound()
            );
        }
        return written;
    }
};

class ping1d_set_mode_auto : public ping_message
{
public:
    ping1d_set_mode_auto(const ping_message& msg) : ping_message { msg } {}
    ping1d_set_mode_auto(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_set_mode_auto() : ping_message { static_cast<uint16_t>(11) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(1); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1003; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t mode_auto() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 0]); }
    void set_mode_auto(const uint8_t mode_auto) { reinterpret_cast<uint8_t&>(msgData[headerLength + 0]) = mode_auto; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  mode_auto: %d\n"
                , mode_auto()
            );
        }
        return written;
    }
};

class ping1d_set_ping_interval : public ping_message
{
public:
    ping1d_set_ping_interval(const ping_message& msg) : ping_message { msg } {}
    ping1d_set_ping_interval(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_set_ping_interval() : ping_message { static_cast<uint16_t>(12) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(2); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1004; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t ping_interval() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 0]); }
    void set_ping_interval(const uint16_t ping_interval) { reinterpret_cast<uint16_t&>(msgData[headerLength + 0]) = ping_interval; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  ping_interval: %d\n"
                , ping_interval()
            );
        }
        return written;
    }
};

class ping1d_set_gain_setting : public ping_message
{
public:
    ping1d_set_gain_setting(const ping_message& msg) : ping_message { msg } {}
    ping1d_set_gain_setting(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_set_gain_setting() : ping_message { static_cast<uint16_t>(11) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(1); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1005; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t gain_setting() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 0]); }
    void set_gain_setting(const uint8_t gain_setting) { reinterpret_cast<uint8_t&>(msgData[headerLength + 0]) = gain_setting; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  gain_setting: %d\n"
                , gain_setting()
            );
        }
        return written;
    }
};

class ping1d_set_ping_enable : public ping_message
{
public:
    ping1d_set_ping_enable(const ping_message& msg) : ping_message { msg } {}
    ping1d_set_ping_enable(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_set_ping_enable() : ping_message { static_cast<uint16_t>(11) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(1); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1006; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t ping_enabled() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 0]); }
    void set_ping_enabled(const uint8_t ping_enabled) { reinterpret_cast<uint8_t&>(msgData[headerLength + 0]) = ping_enabled; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  ping_enabled: %d\n"
                , ping_enabled()
            );
        }
        return written;
    }
};

class ping1d_firmware_version : public ping_message
{
public:
    ping1d_firmware_version(const ping_message& msg) : ping_message { msg } {}
    ping1d_firmware_version(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_firmware_version() : ping_message { static_cast<uint16_t>(16) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(6); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1200; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t device_type() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 0]); }
    void set_device_type(const uint8_t device_type) { reinterpret_cast<uint8_t&>(msgData[headerLength + 0]) = device_type; }
    uint8_t device_model() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 1]); }
    void set_device_model(const uint8_t device_model) { reinterpret_cast<uint8_t&>(msgData[headerLength + 1]) = device_model; }
    uint16_t firmware_version_major() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 2]); }
    void set_firmware_version_major(const uint16_t firmware_version_major) { reinterpret_cast<uint16_t&>(msgData[headerLength + 2]) = firmware_version_major; }
    uint16_t firmware_version_minor() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 4]); }
    void set_firmware_version_minor(const uint16_t firmware_version_minor) { reinterpret_cast<uint16_t&>(msgData[headerLength + 4]) = firmware_version_minor; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  device_type: %d\n"
                "  device_model: %d\n"
                "  firmware_version_major: %d\n"
                "  firmware_version_minor: %d\n"
                , device_type()
                , device_model()
                , firmware_version_major()
                , firmware_version_minor()
            );
        }
        return written;
    }
};

class ping1d_device_id : public ping_message
{
public:
    ping1d_device_id(const ping_message& msg) : ping_message { msg } {}
    ping1d_device_id(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_device_id() : ping_message { static_cast<uint16_t>(11) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(1); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1201; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t device_id() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 0]); }
    void set_device_id(const uint8_t device_id) { reinterpret_cast<uint8_t&>(msgData[headerLength + 0]) = device_id; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  device_id: %d\n"
                , device_id()
            );
        }
        return written;
    }
};

class ping1d_voltage_5 : public ping_message
{
public:
    ping1d_voltage_5(const ping_message& msg) : ping_message { msg } {}
    ping1d_voltage_5(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_voltage_5() : ping_message { static_cast<uint16_t>(12) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(2); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1202; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t voltage_5() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 0]); }
    void set_voltage_5(const uint16_t voltage_5) { reinterpret_cast<uint16_t&>(msgData[headerLength + 0]) = voltage_5; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  voltage_5: %d\n"
                , voltage_5()
            );
        }
        return written;
    }
};

class ping1d_speed_of_sound : public ping_message
{
public:
    ping1d_speed_of_sound(const ping_message& msg) : ping_message { msg } {}
    ping1d_speed_of_sound(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_speed_of_sound() : ping_message { static_cast<uint16_t>(14) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(4); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1203; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t speed_of_sound() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 0]); }
    void set_speed_of_sound(const uint32_t speed_of_sound) { reinterpret_cast<uint32_t&>(msgData[headerLength + 0]) = speed_of_sound; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  speed_of_sound: %d\n"
                , speed_of_sound()
            );
        }
        return written;
    }
};

class ping1d_range : public ping_message
{
public:
    ping1d_range(const ping_message& msg) : ping_message { msg } {}
    ping1d_range(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_range() : ping_message { static_cast<uint16_t>(18) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(8); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1204; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t scan_start() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 0]); }
    void set_scan_start(const uint32_t scan_start) { reinterpret_cast<uint32_t&>(msgData[headerLength + 0]) = scan_start; }
    uint32_t scan_length() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 4]); }
    void set_scan_length(const uint32_t scan_length) { reinterpret_cast<uint32_t&>(msgData[headerLength + 4]) = scan_length; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  scan_start: %d\n"
                "  scan_length: %d\n"
                , scan_start()
                , scan_length()
            );
        }
        return written;
    }
};

class ping1d_mode_auto : public ping_message
{
public:
    ping1d_mode_auto(const ping_message& msg) : ping_message { msg } {}
    ping1d_mode_auto(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_mode_auto() : ping_message { static_cast<uint16_t>(11) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(1); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1205; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t mode_auto() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 0]); }
    void set_mode_auto(const uint8_t mode_auto) { reinterpret_cast<uint8_t&>(msgData[headerLength + 0]) = mode_auto; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  mode_auto: %d\n"
                , mode_auto()
            );
        }
        return written;
    }
};

class ping1d_ping_interval : public ping_message
{
public:
    ping1d_ping_interval(const ping_message& msg) : ping_message { msg } {}
    ping1d_ping_interval(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_ping_interval() : ping_message { static_cast<uint16_t>(12) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(2); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1206; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t ping_interval() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 0]); }
    void set_ping_interval(const uint16_t ping_interval) { reinterpret_cast<uint16_t&>(msgData[headerLength + 0]) = ping_interval; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  ping_interval: %d\n"
                , ping_interval()
            );
        }
        return written;
    }
};

class ping1d_gain_setting : public ping_message
{
public:
    ping1d_gain_setting(const ping_message& msg) : ping_message { msg } {}
    ping1d_gain_setting(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_gain_setting() : ping_message { static_cast<uint16_t>(14) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(4); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1207; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t gain_setting() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 0]); }
    void set_gain_setting(const uint32_t gain_setting) { reinterpret_cast<uint32_t&>(msgData[headerLength + 0]) = gain_setting; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  gain_setting: %d\n"
                , gain_setting()
            );
        }
        return written;
    }
};

class ping1d_transmit_duration : public ping_message
{
public:
    ping1d_transmit_duration(const ping_message& msg) : ping_message { msg } {}
    ping1d_transmit_duration(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_transmit_duration() : ping_message { static_cast<uint16_t>(12) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(2); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1208; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t transmit_duration() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 0]); }
    void set_transmit_duration(const uint16_t transmit_duration) { reinterpret_cast<uint16_t&>(msgData[headerLength + 0]) = transmit_duration; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  transmit_duration: %d\n"
                , transmit_duration()
            );
        }
        return written;
    }
};

class ping1d_general_info : public ping_message
{
public:
    ping1d_general_info(const ping_message& msg) : ping_message { msg } {}
    ping1d_general_info(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_general_info() : ping_message { static_cast<uint16_t>(20) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(10); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1210; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t firmware_version_major() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 0]); }
    void set_firmware_version_major(const uint16_t firmware_version_major) { reinterpret_cast<uint16_t&>(msgData[headerLength + 0]) = firmware_version_major; }
    uint16_t firmware_version_minor() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 2]); }
    void set_firmware_version_minor(const uint16_t firmware_version_minor) { reinterpret_cast<uint16_t&>(msgData[headerLength + 2]) = firmware_version_minor; }
    uint16_t voltage_5() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 4]); }
    void set_voltage_5(const uint16_t voltage_5) { reinterpret_cast<uint16_t&>(msgData[headerLength + 4]) = voltage_5; }
    uint16_t ping_interval() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 6]); }
    void set_ping_interval(const uint16_t ping_interval) { reinterpret_cast<uint16_t&>(msgData[headerLength + 6]) = ping_interval; }
    uint8_t gain_setting() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 8]); }
    void set_gain_setting(const uint8_t gain_setting) { reinterpret_cast<uint8_t&>(msgData[headerLength + 8]) = gain_setting; }
    uint8_t mode_auto() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 9]); }
    void set_mode_auto(const uint8_t mode_auto) { reinterpret_cast<uint8_t&>(msgData[headerLength + 9]) = mode_auto; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  firmware_version_major: %d\n"
                "  firmware_version_minor: %d\n"
                "  voltage_5: %d\n"
                "  ping_interval: %d\n"
                "  gain_setting: %d\n"
                "  mode_auto: %d\n"
                , firmware_version_major()
                , firmware_version_minor()
                , voltage_5()
                , ping_interval()
                , gain_setting()
                , mode_auto()
            );
        }
        return written;
    }
};

class ping1d_distance_simple : public ping_message
{
public:
    ping1d_distance_simple(const ping_message& msg) : ping_message { msg } {}
    ping1d_distance_simple(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_distance_simple() : ping_message { static_cast<uint16_t>(15) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(5); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1211; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t distance() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 0]); }
    void set_distance(const uint32_t distance) { reinterpret_cast<uint32_t&>(msgData[headerLength + 0]) = distance; }
    uint8_t confidence() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 4]); }
    void set_confidence(const uint8_t confidence) { reinterpret_cast<uint8_t&>(msgData[headerLength + 4]) = confidence; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  distance: %d\n"
                "  confidence: %d\n"
                , distance()
                , confidence()
            );
        }
        return written;
    }
};

class ping1d_distance : public ping_message
{
public:
    ping1d_distance(const ping_message& msg) : ping_message { msg } {}
    ping1d_distance(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_distance() : ping_message { static_cast<uint16_t>(34) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(24); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1212; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t distance() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 0]); }
    void set_distance(const uint32_t distance) { reinterpret_cast<uint32_t&>(msgData[headerLength + 0]) = distance; }
    uint16_t confidence() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 4]); }
    void set_confidence(const uint16_t confidence) { reinterpret_cast<uint16_t&>(msgData[headerLength + 4]) = confidence; }
    uint16_t transmit_duration() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 6]); }
    void set_transmit_duration(const uint16_t transmit_duration) { reinterpret_cast<uint16_t&>(msgData[headerLength + 6]) = transmit_duration; }
    uint32_t ping_number() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 8]); }
    void set_ping_number(const uint32_t ping_number) { reinterpret_cast<uint32_t&>(msgData[headerLength + 8]) = ping_number; }
    uint32_t scan_start() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 12]); }
    void set_scan_start(const uint32_t scan_start) { reinterpret_cast<uint32_t&>(msgData[headerLength + 12]) = scan_start; }
    uint32_t scan_length() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 16]); }
    void set_scan_length(const uint32_t scan_length) { reinterpret_cast<uint32_t&>(msgData[headerLength + 16]) = scan_length; }
    uint32_t gain_setting() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 20]); }
    void set_gain_setting(const uint32_t gain_setting) { reinterpret_cast<uint32_t&>(msgData[headerLength + 20]) = gain_setting; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  distance: %d\n"
                "  confidence: %d\n"
                "  transmit_duration: %d\n"
                "  ping_number: %d\n"
                "  scan_start: %d\n"
                "  scan_length: %d\n"
                "  gain_setting: %d\n"
                , distance()
                , confidence()
                , transmit_duration()
                , ping_number()
                , scan_start()
                , scan_length()
                , gain_setting()
            );
        }
        return written;
    }
};

class ping1d_processor_temperature : public ping_message
{
public:
    ping1d_processor_temperature(const ping_message& msg) : ping_message { msg } {}
    ping1d_processor_temperature(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_processor_temperature() : ping_message { static_cast<uint16_t>(12) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(2); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1213; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t processor_temperature() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 0]); }
    void set_processor_temperature(const uint16_t processor_temperature) { reinterpret_cast<uint16_t&>(msgData[headerLength + 0]) = processor_temperature; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  processor_temperature: %d\n"
                , processor_temperature()
            );
        }
        return written;
    }
};

class ping1d_pcb_temperature : public ping_message
{
public:
    ping1d_pcb_temperature(const ping_message& msg) : ping_message { msg } {}
    ping1d_pcb_temperature(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_pcb_temperature() : ping_message { static_cast<uint16_t>(12) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(2); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1214; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t pcb_temperature() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 0]); }
    void set_pcb_temperature(const uint16_t pcb_temperature) { reinterpret_cast<uint16_t&>(msgData[headerLength + 0]) = pcb_temperature; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  pcb_temperature: %d\n"
                , pcb_temperature()
            );
        }
        return written;
    }
};

class ping1d_ping_enable : public ping_message
{
public:
    ping1d_ping_enable(const ping_message& msg) : ping_message { msg } {}
    ping1d_ping_enable(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_ping_enable() : ping_message { static_cast<uint16_t>(11) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(1); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1215; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint8_t ping_enabled() const { return reinterpret_cast<uint8_t&>(msgData[headerLength + 0]); }
    void set_ping_enabled(const uint8_t ping_enabled) { reinterpret_cast<uint8_t&>(msgData[headerLength + 0]) = ping_enabled; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  ping_enabled: %d\n"
                , ping_enabled()
            );
        }
        return written;
    }
};

class ping1d_profile : public ping_message
{
public:
    ping1d_profile(const ping_message& msg) : ping_message { msg } {}
    ping1d_profile(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_profile(uint16_t profile_data_length
) : ping_message { static_cast<uint16_t>(36 + profile_data_length) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(26 + profile_data_length); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1300; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint32_t distance() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 0]); }
    void set_distance(const uint32_t distance) { reinterpret_cast<uint32_t&>(msgData[headerLength + 0]) = distance; }
    uint16_t confidence() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 4]); }
    void set_confidence(const uint16_t confidence) { reinterpret_cast<uint16_t&>(msgData[headerLength + 4]) = confidence; }
    uint16_t transmit_duration() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 6]); }
    void set_transmit_duration(const uint16_t transmit_duration) { reinterpret_cast<uint16_t&>(msgData[headerLength + 6]) = transmit_duration; }
    uint32_t ping_number() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 8]); }
    void set_ping_number(const uint32_t ping_number) { reinterpret_cast<uint32_t&>(msgData[headerLength + 8]) = ping_number; }
    uint32_t scan_start() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 12]); }
    void set_scan_start(const uint32_t scan_start) { reinterpret_cast<uint32_t&>(msgData[headerLength + 12]) = scan_start; }
    uint32_t scan_length() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 16]); }
    void set_scan_length(const uint32_t scan_length) { reinterpret_cast<uint32_t&>(msgData[headerLength + 16]) = scan_length; }
    uint32_t gain_setting() const { return reinterpret_cast<uint32_t&>(msgData[headerLength + 20]); }
    void set_gain_setting(const uint32_t gain_setting) { reinterpret_cast<uint32_t&>(msgData[headerLength + 20]) = gain_setting; }
    uint16_t profile_data_length() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 24]); }
    //TODO do this in constructor (const)
    void set_profile_data_length(const uint16_t profile_data_length) { reinterpret_cast<uint16_t&>(msgData[headerLength + 24]) = profile_data_length;}
    uint8_t* profile_data() const { return reinterpret_cast<uint8_t*>(msgData+headerLength+26); }
    void set_profile_data_at(const uint16_t i, const uint8_t data) { reinterpret_cast<uint8_t&>(msgData[headerLength + 26 + i]) = data; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  distance: %d\n"
                "  confidence: %d\n"
                "  transmit_duration: %d\n"
                "  ping_number: %d\n"
                "  scan_start: %d\n"
                "  scan_length: %d\n"
                "  gain_setting: %d\n"
                , distance()
                , confidence()
                , transmit_duration()
                , ping_number()
                , scan_start()
                , scan_length()
                , gain_setting()
            );
        }
        return written;
    }
};

class ping1d_goto_bootloader : public ping_message
{
public:
    ping1d_goto_bootloader(const ping_message& msg) : ping_message { msg } {}
    ping1d_goto_bootloader(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_goto_bootloader() : ping_message { static_cast<uint16_t>(10) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(0); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1100; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

};

class ping1d_continuous_start : public ping_message
{
public:
    ping1d_continuous_start(const ping_message& msg) : ping_message { msg } {}
    ping1d_continuous_start(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_continuous_start() : ping_message { static_cast<uint16_t>(12) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(2); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1400; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t id() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 0]); }
    void set_id(const uint16_t id) { reinterpret_cast<uint16_t&>(msgData[headerLength + 0]) = id; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  id: %d\n"
                , id()
            );
        }
        return written;
    }
};

class ping1d_continuous_stop : public ping_message
{
public:
    ping1d_continuous_stop(const ping_message& msg) : ping_message { msg } {}
    ping1d_continuous_stop(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    ping1d_continuous_stop() : ping_message { static_cast<uint16_t>(12) }
    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>(2); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = 1401; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

    uint16_t id() const { return reinterpret_cast<uint16_t&>(msgData[headerLength + 0]); }
    void set_id(const uint16_t id) { reinterpret_cast<uint16_t&>(msgData[headerLength + 0]) = id; }

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
                "  id: %d\n"
                , id()
            );
        }
        return written;
    }
};

