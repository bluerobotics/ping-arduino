/*
* ping1d.cpp
* A device API for the Blue Robotics Ping1D echosounder
*
*~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
* THIS IS AN AUTOGENERATED FILE
* DO NOT EDIT
*~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
*
*/

#include "ping1d.h"
#include "pingmessage_all.h"

Ping1D::Ping1D(Stream& ser) : _stream ( ser ) {}

Ping1D::~Ping1D()
{
    if (_profile_data) {
       free(_profile_data);
    }
}

PingMessage* Ping1D::read()
{
    while(_stream.available()) {
        if (_parser.parseByte(_stream.read()) == PingParser::NEW_MESSAGE) {
          return &_parser.rxMsg;
        }
    }
    return nullptr;
}

size_t Ping1D::write(uint8_t* data, uint16_t length)
{
    return _stream.write(data, length);
}

bool Ping1D::initialize(uint16_t ping_interval_ms)
{
    // allow 'auto' firmware to detect baudrate
    _stream.write(0b01010101);
    
    if(!request(Ping1DNamespace::Device_id)) {
        return false;
    }

    if (!request(Ping1DNamespace::Firmware_version)) {
        return false;
    }

    if(!request(Ping1DNamespace::Voltage_5)) {
        return false;
    }

    if (!request(Ping1DNamespace::Processor_temperature)) {
        return false;
    }

    // Configure ping interval
    if (!set_ping_interval(ping_interval_ms)) {
        return false;
    }

    return true;
}

PingMessage* Ping1D::waitMessage(enum Ping1DNamespace::msg_ping1D_id id, uint16_t timeout_ms)
{
    uint32_t tstart = millis();
    while (millis() < tstart + timeout_ms) {

        PingMessage* pmsg = read();

        if (!pmsg) {
            continue;
        }

        handleMessage(pmsg);

        if (pmsg->message_id() == Ping1DNamespace::Nack) {
            ping_msg_ping1D_nack nack(*pmsg);

            if (nack.nacked_id() == id) {
                return nullptr;
            }
        }

        if (pmsg->message_id() == id) {
            return pmsg;
        }
    }

    return nullptr;
}

void Ping1D::handleMessage(PingMessage* pmsg)
{
    switch (pmsg->message_id()) {
        case Ping1DNamespace::Device_id:
        {
            ping_msg_ping1D_device_id m(*pmsg);
            _device_id = m.device_id();
        }
            break;

        case Ping1DNamespace::Device_information:
        {
            ping_msg_ping1D_device_information m(*pmsg);
            _device_type = m.device_type();
            _device_revision = m.device_revision();
            _firmware_version_major = m.firmware_version_major();
            _firmware_version_minor = m.firmware_version_minor();
            _firmware_version_patch = m.firmware_version_patch();
            _reserved = m.reserved();
        }
            break;

        case Ping1DNamespace::Distance:
        {
            ping_msg_ping1D_distance m(*pmsg);
            _distance = m.distance();
            _confidence = m.confidence();
            _transmit_duration = m.transmit_duration();
            _ping_number = m.ping_number();
            _scan_start = m.scan_start();
            _scan_length = m.scan_length();
            _gain_setting = m.gain_setting();
        }
            break;

        case Ping1DNamespace::Distance_simple:
        {
            ping_msg_ping1D_distance_simple m(*pmsg);
            _distance = m.distance();
            _confidence = m.confidence();
        }
            break;

        case Ping1DNamespace::Firmware_version:
        {
            ping_msg_ping1D_firmware_version m(*pmsg);
            _device_type = m.device_type();
            _device_model = m.device_model();
            _firmware_version_major = m.firmware_version_major();
            _firmware_version_minor = m.firmware_version_minor();
        }
            break;

        case Ping1DNamespace::Gain_setting:
        {
            ping_msg_ping1D_gain_setting m(*pmsg);
            _gain_setting = m.gain_setting();
        }
            break;

        case Ping1DNamespace::General_info:
        {
            ping_msg_ping1D_general_info m(*pmsg);
            _firmware_version_major = m.firmware_version_major();
            _firmware_version_minor = m.firmware_version_minor();
            _voltage_5 = m.voltage_5();
            _ping_interval = m.ping_interval();
            _gain_setting = m.gain_setting();
            _mode_auto = m.mode_auto();
        }
            break;

        case Ping1DNamespace::Mode_auto:
        {
            ping_msg_ping1D_mode_auto m(*pmsg);
            _mode_auto = m.mode_auto();
        }
            break;

        case Ping1DNamespace::Pcb_temperature:
        {
            ping_msg_ping1D_pcb_temperature m(*pmsg);
            _pcb_temperature = m.pcb_temperature();
        }
            break;

        case Ping1DNamespace::Ping_enable:
        {
            ping_msg_ping1D_ping_enable m(*pmsg);
            _ping_enabled = m.ping_enabled();
        }
            break;

        case Ping1DNamespace::Ping_interval:
        {
            ping_msg_ping1D_ping_interval m(*pmsg);
            _ping_interval = m.ping_interval();
        }
            break;

        case Ping1DNamespace::Processor_temperature:
        {
            ping_msg_ping1D_processor_temperature m(*pmsg);
            _processor_temperature = m.processor_temperature();
        }
            break;

        case Ping1DNamespace::Profile:
        {
            ping_msg_ping1D_profile m(*pmsg);
            _distance = m.distance();
            _confidence = m.confidence();
            _transmit_duration = m.transmit_duration();
            _ping_number = m.ping_number();
            _scan_start = m.scan_start();
            _scan_length = m.scan_length();
            _gain_setting = m.gain_setting();
            if (m.profile_data_length() > _profile_data_length) {
                if (_profile_data) {
                    free(_profile_data);
                }
                _profile_data = (uint8_t*)malloc(m.profile_data_length() * sizeof(uint8_t));
            }

            _profile_data_length = m.profile_data_length();

            for (uint16_t i = 0; i < _profile_data_length; i++) {
                _profile_data[i] = m.profile_data()[i];
            }
        }
            break;

        case Ping1DNamespace::Protocol_version:
        {
            ping_msg_ping1D_protocol_version m(*pmsg);
            _version_major = m.version_major();
            _version_minor = m.version_minor();
            _version_patch = m.version_patch();
            _reserved = m.reserved();
        }
            break;

        case Ping1DNamespace::Range:
        {
            ping_msg_ping1D_range m(*pmsg);
            _scan_start = m.scan_start();
            _scan_length = m.scan_length();
        }
            break;

        case Ping1DNamespace::Speed_of_sound:
        {
            ping_msg_ping1D_speed_of_sound m(*pmsg);
            _speed_of_sound = m.speed_of_sound();
        }
            break;

        case Ping1DNamespace::Transmit_duration:
        {
            ping_msg_ping1D_transmit_duration m(*pmsg);
            _transmit_duration = m.transmit_duration();
        }
            break;

        case Ping1DNamespace::Voltage_5:
        {
            ping_msg_ping1D_voltage_5 m(*pmsg);
            _voltage_5 = m.voltage_5();
        }
            break;


        default:
            break;
    }
}

// ex ping_msg_ping1D_voltage_5 msg(*pd.request(Ping1DNamespace::Voltage_5));
PingMessage* Ping1D::request(enum Ping1DNamespace::msg_ping1D_id id, uint16_t timeout_ms)
{
    ping_msg_ping1D_empty msg;
    msg.set_id(id);
    msg.updateChecksum();
    write(msg.msgData, msg.msgDataLength());
    return waitMessage(id, timeout_ms);
}

// ex auto msg = pd.request<ping_msg_ping1D_voltage_5>();
template <typename T>
T* Ping1D::request()
{
    T resp; // todo there should be some other (static) way to get the message id?
    static ping_msg_ping1D_empty req;
    req.set_id(resp.message_id());
    req.updateChecksum();
    write(req.msgData, req.msgDataLength());
    return (T*)waitMessage(resp.message_id());
}

bool Ping1D::set_device_id(uint8_t device_id, bool verify)
{
    ping_msg_ping1D_set_device_id m;
    m.set_device_id(device_id);
    m.updateChecksum();
    write(m.msgData, m.msgDataLength());
    if (!request(Ping1DNamespace::Device_id)) {
        return false; // no reply from device
    }
    // Read back the data and check that changes have been applied
    if (verify
        && (_device_id != device_id)) {
        return false; // device reply does not match
    }
    return true; // success
}

bool Ping1D::set_gain_setting(uint8_t gain_setting, bool verify)
{
    ping_msg_ping1D_set_gain_setting m;
    m.set_gain_setting(gain_setting);
    m.updateChecksum();
    write(m.msgData, m.msgDataLength());
    if (!request(Ping1DNamespace::Gain_setting)) {
        return false; // no reply from device
    }
    // Read back the data and check that changes have been applied
    if (verify
        && (_gain_setting != gain_setting)) {
        return false; // device reply does not match
    }
    return true; // success
}

bool Ping1D::set_mode_auto(uint8_t mode_auto, bool verify)
{
    ping_msg_ping1D_set_mode_auto m;
    m.set_mode_auto(mode_auto);
    m.updateChecksum();
    write(m.msgData, m.msgDataLength());
    if (!request(Ping1DNamespace::Mode_auto)) {
        return false; // no reply from device
    }
    // Read back the data and check that changes have been applied
    if (verify
        && (_mode_auto != mode_auto)) {
        return false; // device reply does not match
    }
    return true; // success
}

bool Ping1D::set_ping_enable(uint8_t ping_enabled, bool verify)
{
    ping_msg_ping1D_set_ping_enable m;
    m.set_ping_enabled(ping_enabled);
    m.updateChecksum();
    write(m.msgData, m.msgDataLength());
    if (!request(Ping1DNamespace::Ping_enable)) {
        return false; // no reply from device
    }
    // Read back the data and check that changes have been applied
    if (verify
        && (_ping_enabled != ping_enabled)) {
        return false; // device reply does not match
    }
    return true; // success
}

bool Ping1D::set_ping_interval(uint16_t ping_interval, bool verify)
{
    ping_msg_ping1D_set_ping_interval m;
    m.set_ping_interval(ping_interval);
    m.updateChecksum();
    write(m.msgData, m.msgDataLength());
    if (!request(Ping1DNamespace::Ping_interval)) {
        return false; // no reply from device
    }
    // Read back the data and check that changes have been applied
    if (verify
        && (_ping_interval != ping_interval)) {
        return false; // device reply does not match
    }
    return true; // success
}

bool Ping1D::set_range(uint32_t scan_start, uint32_t scan_length, bool verify)
{
    ping_msg_ping1D_set_range m;
    m.set_scan_start(scan_start);
    m.set_scan_length(scan_length);
    m.updateChecksum();
    write(m.msgData, m.msgDataLength());
    if (!request(Ping1DNamespace::Range)) {
        return false; // no reply from device
    }
    // Read back the data and check that changes have been applied
    if (verify
        && (_scan_start != scan_start
        || _scan_length != scan_length)) {
        return false; // device reply does not match
    }
    return true; // success
}

bool Ping1D::set_speed_of_sound(uint32_t speed_of_sound, bool verify)
{
    ping_msg_ping1D_set_speed_of_sound m;
    m.set_speed_of_sound(speed_of_sound);
    m.updateChecksum();
    write(m.msgData, m.msgDataLength());
    if (!request(Ping1DNamespace::Speed_of_sound)) {
        return false; // no reply from device
    }
    // Read back the data and check that changes have been applied
    if (verify
        && (_speed_of_sound != speed_of_sound)) {
        return false; // device reply does not match
    }
    return true; // success
}

